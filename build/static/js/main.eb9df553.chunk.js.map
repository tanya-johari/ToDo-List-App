{"version":3,"sources":["Header/Header.js","ToDoList/ToDoList.js","App.js","index.js"],"names":["Header","_jsx","className","children","ToDoList","_ref","todos","setTodos","isEmpty","length","completedList","setCompletedList","useState","map","_jsxs","_Fragment","todo","index","style","textDecoration","cursor","completed","onClick","prevCompletedList","updatedCompletedList","toggleCompleted","some","handleRemoveCompleted","filter","prevTodos","_","handleEmptyAll","todoitems","App","newTask","setNewTask","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","text","trim","rootElement","document","getElementById","createRoot","render"],"mappings":"gKAAe,SAASA,IACpB,OACEC,cAAA,UAAQC,UAAU,SAAQC,SACxBF,cAAA,MAAAE,SAAI,2BAGV,C,MCsDaC,MAtDEC,IAA0B,IAAzB,MAAEC,EAAK,SAAEC,GAAUF,EAEnC,MAAMG,EAA2B,IAAjBF,EAAMG,QAEfC,EAAeC,GAAoBC,mBACxCN,EAAMO,KAAI,KAAM,KAuBlB,OACEC,eAAAC,WAAA,CAAAZ,SAAA,CACEF,cAAA,MAAIC,UAAU,YAAWC,SACtBK,EACCP,cAAA,MAAAE,SAAIF,cAAA,KAAAE,SAAG,kCACJG,EAAMO,KAAI,CAACG,EAAMC,IACpBH,eAAA,MACEI,MAAO,IAAKR,EAAcO,GAAS,CAAEE,eAAgB,gBAAmB,CAAC,EAAGC,OAAQ,WACpFlB,UAAU,YACVmB,UAAWX,EAAcO,GAAS,OAAS,QAAQd,SAAA,CAClDa,EACDf,cAAA,UAAQC,UAAU,WAAWoB,QAASA,IA3BvBL,KACvBN,GAAkBY,IAChB,MAAMC,EAAuB,IAAID,GAEjC,OADAC,EAAqBP,IAAUM,EAAkBN,GAC1CO,CAAoB,GAC3B,EAsBkDC,CAAgBR,GAAOd,SAC/DO,EAAcO,GA3CZ,SACI,mBAoCHA,OAWbhB,cAAA,UACEC,UAAU,YACVoB,QAASZ,EAAcgB,MAAKL,GAAaA,IA3BjBM,KAC5BhB,GAAkBY,GACcA,EAAkBK,QAAO,CAACP,EAAWJ,KAAWI,MAGhFd,GAAUsB,GAAcA,EAAUD,QAAO,CAACE,EAAGb,KAAWP,EAAcO,MAAQ,EAjBzDc,KACrBxB,EAAS,GAAG,EAsCqFJ,SAC5FO,EAAcgB,MAAKL,GAAaA,IAAa,mBAAqB,YAEpE,ECnDP,MAAMW,EAAY,CAAC,kBAAmB,uBAAwB,oBAC9D,oBAAqB,gBAAiB,iBAEvB,SAASC,IAEtB,MAAO3B,EAAOC,GAAYK,mBAASoB,IAC5BE,EAASC,GAAcvB,mBAAS,IASvC,OACEE,eAAA,OAAKZ,UAAU,MAAKC,SAAA,CAClBF,cAACD,EAAM,IACPc,eAAA,QAAMsB,SAAWC,GAAMA,EAAEC,iBAAiBnC,SAAA,CAAC,KAC3CF,cAAA,SACEsC,KAAK,OACLC,YAAY,iBACZC,MAAOP,EACPQ,SAAWL,GAAMF,EAAWE,EAAEM,OAAOF,SAEvC3B,eAAA,UAAQZ,UAAU,UAAUqC,KAAK,SAASjB,QAASA,KAjBtCsB,SAiBoDV,GAhB1DW,SACPtC,GAAUyB,GAAc,IAAIA,EAAWY,KACvCT,EAAW,IAc+D,EAAAhC,SAAA,CAAC,KAAmC,iBAI9GF,cAACG,EAAQ,CAACE,MAAOA,EAAOC,SAAUA,MAGxC,CClCA,MAAMuC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OAAOjD,cAACgC,EAAG,I","file":"static/js/main.eb9df553.chunk.js","sourcesContent":["export default function Header() {\r\n    return (\r\n      <header className=\"Header\">\r\n        <h1>To-Do appüìù</h1>\r\n      </header>\r\n    );\r\n  }\r\n  ","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst tickEmoji = '‚úÖ';\r\nconst emptyCheckbox = '‚óªÔ∏è';\r\n\r\nconst ToDoList = ({ todos, setTodos }) => {\r\n\r\n  const isEmpty = todos.length === 0; // Check if the list is empty\r\n\r\n  const [completedList, setCompletedList] = useState(\r\n    todos.map(() => false) // Initialize completedList with false for each todo\r\n  );\r\n\r\n  const handleEmptyAll = () => {\r\n    setTodos([]); // Set todos to an empty array to clear the list\r\n  };\r\n\r\n  const toggleCompleted = (index) => {\r\n    setCompletedList((prevCompletedList) => {\r\n      const updatedCompletedList = [...prevCompletedList];\r\n      updatedCompletedList[index] = !prevCompletedList[index];\r\n      return updatedCompletedList;\r\n    });\r\n  };\r\n\r\n  const handleRemoveCompleted = () => {\r\n    setCompletedList((prevCompletedList) => {\r\n      const filteredCompletedList = prevCompletedList.filter((completed, index) => !completed);\r\n      return filteredCompletedList;\r\n    });\r\n    setTodos((prevTodos) => prevTodos.filter((_, index) => !completedList[index]));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"todo-list\">\r\n        {isEmpty ? (\r\n          <li><i>Nothing to do buddy. Sleep!</i></li>\r\n        ) : (todos.map((todo, index) => (\r\n          <li key={index}\r\n            style={{ ...completedList[index] ? { textDecoration: 'line-through' } : {}, cursor: 'pointer' }}\r\n            className=\"todo-item\"\r\n            completed={completedList[index] ? 'true' : 'false'}>\r\n            {todo}\r\n            <button className=\"btn-mark\" onClick={() => toggleCompleted(index)}>\r\n               {completedList[index] ? tickEmoji : emptyCheckbox }\r\n            </button>\r\n          </li>\r\n        )))}\r\n      </ul>\r\n      <button \r\n        className=\"btn-empty\"\r\n        onClick={completedList.some(completed => completed) ? handleRemoveCompleted : handleEmptyAll}>\r\n        {completedList.some(completed => completed) ? 'Remove Completed' : 'Empty'}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import { useState } from \"react\";\nimport Header from \"./Header/Header\";\nimport \"./styles.css\";\nimport ToDoList from \"./ToDoList/ToDoList\";\n\nconst todoitems = [\"Read SpringBoot\", \"Complete assignments\", \"Prepare breakfast\", \n\"Sleep for 2 hours\", \"Take a shower\", \"Buy groceries\"]; // Your ToDoList items\n\nexport default function App() {\n\n  const [todos, setTodos] = useState(todoitems);\n  const [newTask, setNewTask] = useState('');\n\n  const addTodo = (text) =>{\n    if (text.trim()) { // Check if input is not empty\n      setTodos((todoitems) => [...todoitems, text]);\n      setNewTask(''); // Clear the input field after adding the task\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <form onSubmit={(e) => e.preventDefault()}>  {/* Prevent default form submission */}\n      <input\n        type=\"text\"\n        placeholder=\"Add a new task\"\n        value={newTask}\n        onChange={(e) => setNewTask(e.target.value)}\n      />\n      <button className=\"btn-add\" type=\"button\" onClick={() => addTodo(newTask)}>  {/* Button type set to button */}\n        Add Task\n      </button>\n    </form>\n      <ToDoList todos={todos} setTodos={setTodos}/>\n    </div>\n  );\n}\n","import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(<App />);\n"],"sourceRoot":""}